version: '3.8'

services:
  # Main development environment
  dev-environment:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ueil-dev-environment
    volumes:
      - ../:/workspace:cached
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PYTHONPATH=/workspace
      - DEVELOPMENT=true
    depends_on:
      - postgres-dev
      - minio-dev
    networks:
      - dev-network
    command: sleep infinity

  # Development PostgreSQL database
  postgres-dev:
    image: postgres:13
    container_name: postgres-dev
    environment:
      POSTGRES_USER: ${PG_USER:-postgres}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-postgres123}
      POSTGRES_DB: ${PG_DATABASE:-metadata_db}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ../backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - dev-network

  # Development MinIO storage
  minio-dev:
    image: minio/minio:latest
    container_name: minio-dev
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin123}
    command: server /data --console-address ":9001"
    volumes:
      - minio_dev_data:/data
    networks:
      - dev-network

  # Note: Backend and frontend services are available via the main docker-compose.yml
  # Use 'docker-compose up' from the project root to start the full stack

networks:
  dev-network:
    driver: bridge

volumes:
  postgres_dev_data:
  minio_dev_data:
